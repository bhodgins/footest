local argparse = require 'argparse/src/argparse'

local source_files = {...} -- Source files we are lobstering
local code_stash   = {}
local globals      = {}
local out_lob      = ''
local shell        = {}
local lob          = {}
local version      = '0.2'

LOB_OBJ_ACCESS = true -- Allow us to open lob files

function lob.new()
   local self    = {}
   local data    = '' -- Data section
   local code    = {} -- Code section
   local footer  = ''
   local objbody = ''

   function self.data(d)
      if d then data = d end
      return data
   end

   function self.body(b)
      if b then objbody = b end
      return objbody
   end

   function self.footer(f)
      if f then footer = f end
      return footer
   end

   function self.add_code(name, code_contents)
      if not code[name] then
	 code[name] = code_contents
      end
   end

   -- Merge an existing lob object into this one:
   function self.add_lob(lob_obj)
      -- TODO
   end

   -- Generates a lob file from the current data:
   function self.generate()
      local _LOB_ = ''
      
      -- Begin lob object:
      _LOB_ = _LOB_ .. 'local _L = {} function _L.new() local self = {version = "' .. version .. '"} '
      
      -- Data section:
      _LOB_ = _LOB_ .. 'local _DATA=[===[' .. data .. ']===] '
      
      -- Code section:
      _LOB_ = _LOB_ .. 'local _CODE={'
      for name, code_contents in pairs(code) do
	 name = name:match('^.+/(.+)$') -- strip path
	 _LOB_ = _LOB_ .. "['" .. name .. "']=[==[" .. code_contents .. ']==],'
      end
      _LOB_ = _LOB_ .. '} '
      _LOB_ = _LOB_ .. objbody
      _LOB_ = _LOB_ .. 'return self end ' -- end lob object
      _LOB_ = _LOB_ .. footer  -- Footer

      return _LOB_
   end
   
   return self
end

function lob.open(filename)
   local lob_obj = lob.new()

   -- TODO: Open file and populate data
end

local function minify(code)
   local fh     = assert(io.popen("luamin -c << CODE_EOF\n" .. code .. "\nCODE_EOF", 'r'))
   local output = assert(fh:read('*a'))
   fh:close()

   return output
end		     

-- This script requires the use of argparse for handling arguments:
local parser = argparse('lob', 'Create lobsterized lua files')
parser:option('-d --data', 'data file')
parser:argument('input'):args('1+')

parser:option('-o --output', 'output file')
parser:flag('-m --minify', 'minify code files')
parser:option('-a --append', 'append blobs to existing lob')
local args = parser:parse()

local lob_body = [=[
function self.data() return _DATA end
function self.code() return _CODE end
]=]

local lob_footer = [=[
local my_env = _ENV['LOB_OBJ_ENV'] or _ENV
local obj    = _L.new()
my_env['__LOB_DATA__'] = obj.data()
for k, v in pairs(obj.code()) do
   load(v, '_', nil, my_env)()
end
if _ENV['LOB_OBJ_ACCESS'] == true then return obj -- for this script
else
   if my_env['_start'] ~= nil then
      -- Execute like a process:
      my_env['_start'](...)
   else
      return obj.globals
   end
 end
]=]

-- Really simple serializer:
function serialize(t, ignore_strings)
   ignore_strings = ignore_strings or false
   local function _serialize(t) local s = ''
      for k,v in pairs(t) do
	 if type(v) ~= 'function' then
	    if type(k) == 'number' then s = s .. "[" .. k .. "]="
	    else s = s .. "['" .. k .. "']=" end

	    if type(v) == 'table' then
	       s = s .. serialize(v,ignore_strings) .. ','
	    elseif type(v) == 'string'    then
	       if ignore_strings == false then s = s .. "'" .. v .. "',"
	       else s = s .. v .. ',' end
	    else s = s .. v .. ','    end
	 end
      end
      return '{' .. s .. '}'
   end
   
   return _serialize(t)
end

function lobify()
   local dest_file = table.remove(source_files)
   for _, file in ipairs(source_files) do
      local fh, err = io.open(file, 'rb')
      if err then
	 print("Can't open file '" .. file .. "': " .. err)
	 os.exit(false)
      end
      local contents, err = fh:read('*a')
      if err then
	 print("Can't read from file '" .. file .. "': " .. err)
	 os.exit(false)
      end
      table.insert(code_stash, '[==[ ' .. contents .. ' ]==]')
   end

   for k, v in pairs(globals) do
      --print(k .. ':' .. v)
   end

   out_lob = out_lob .. 'local lob_objs=' .. serialize(code_stash, true) .. ','

   local out_fh, err = io.open(dest_file, 'w')
   if err then
      print("Can't open '" .. dest_file .. "' for writing: '" .. err)
      os.exit(false)
   end
   out_fh:write(out_lob)
   io.close(out_fh)
end

local function file_slurp(filename)
   local fh, err = io.open(filename, 'rb')
   if err then
      print("Cannot open file '" .. filename .. "' for reading: " .. err)
      os.exit(false)
   end
   local contents, err = fh:read('*a')
   if err then
      print("Cannot read from file '" .. filename .. "': " .. err)
      os.exit(false)
   end
   return contents or nil
end

-- Main:
if args['output'] then
   local out_lob = lob.new()

   -- The data section, if data contents are provided:
   if args['data'] then
      local data_contents = file_slurp(args['data'])
      out_lob.data(data_contents)
   end

   -- The code section:
   for _, code_file in ipairs(args['input']) do
      local code_contents = file_slurp(code_file)

      -- Minify, if requested:
      if args['minify'] then code_contents = minify(code_contents) end
      out_lob.add_code(code_file, code_contents)
   end

   -- The fbody and footer:
   if args['minify'] then
      lob_footer = minify(lob_footer)
      lob_body   = minify(lob_body)
   end
   out_lob.footer(lob_footer)
   out_lob.body(lob_body)
  
   local output = out_lob.generate()
   if args['output'] == '-' then
      print(output)
   else
      local fh, err = io.open(args['output'], 'w')
      if err then
	 print("Cannot open output file '" .. args['output'] .. "' for writing: " .. err)
	 os.exit(false)
      end
      fh:write(output)
      fh:close()
   end
end
